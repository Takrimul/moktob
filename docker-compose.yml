version: '3.8'

services:
  # Main Application
  moktob-app:
    image: moktob-app:latest
    container_name: moktob-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DATABASE_URL=jdbc:postgresql://db:5432/moktob_prod
      - DB_USERNAME=moktob_user
      - DB_PASSWORD=secure_password_123
      - JWT_SECRET=your-super-secure-jwt-secret-key-min-32-chars-change-this
      - MAIL_USERNAME=your-email@gmail.com
      - MAIL_PASSWORD=your-app-password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_FILE_PATH=/var/log/moktob/application.log
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/var/log/moktob
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/moktob/actuator/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    restart: unless-stopped
    networks:
      - moktob-network

  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: moktob-db
    environment:
      - POSTGRES_DB=moktob_prod
      - POSTGRES_USER=moktob_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moktob_user -d moktob_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - moktob-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: moktob-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_password_123
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - moktob-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: moktob-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - moktob-app
    restart: unless-stopped
    networks:
      - moktob-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: moktob-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - moktob-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: moktob-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - moktob-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  moktob-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
